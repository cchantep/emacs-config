;; Object scala/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "scala/"
  :tables (list 
   (semanticdb-table "scala-mode-auto.el"
    :major-mode 'emacs-lisp-mode
    :tags 'nil
    :file "scala-mode-auto.el"
    )
   (semanticdb-table "scala-mode-indent.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("scala-mode-indent" package nil nil [2109 2137]) ("scala-mode-indent:step" variable (:default-value 2) nil [2139 2230]) ("scala-parse-partial-sexp" function nil nil [2232 2310]) ("scala-in-comment-p" function nil nil [2312 2607]) ("scala-in-single-line-comment-p" function nil nil [2609 2984]) ("scala-in-multi-line-comment-p" function nil nil [2986 3233]) ("scala-in-string-p" function nil nil [3235 3629]) ("scala-indentation" function nil nil [3631 3999]) ("scala-comment-indentation" function nil nil [4001 4239]) ("crawl-back-to-template" function nil nil [4241 4589]) ("scala-mode-match-catch-block-p" function nil nil [4904 5035]) ("scala-block-indentation" function (:arguments ("&optional" "case-or-eob")) nil [5093 6223]) ("scala-indentation-from-following" function nil nil [6225 7181]) ("scala-indentation-from-preceding" function nil nil [7183 7893]) ("scala-indenting-case-line-p" function nil nil [7895 8027]) ("scala-indentation-from-block" function nil nil [8029 8399]) ("scala-indent-line-to" function (:arguments ("column")) nil [8401 8769]) ("scala-indent-line" function (:user-visible-flag t) nil [8771 9190]) ("scala-undent-line" function (:user-visible-flag t) nil [9192 9356]) ("scala-electric-brace" function (:user-visible-flag t) nil [9358 10008]) ("scala-newline" function nil nil [10011 10162]))
    :file "scala-mode-indent.el"
    :pointmax 10163
    )
   (semanticdb-table "scala-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("scala-mode" package nil nil [2136 2157]) ("cl" include nil nil [2159 2172]) ("scala-mode-constants" include nil nil [2174 2205]) ("scala-mode-variables" include nil nil [2206 2237]) ("scala-mode-lib" include nil nil [2238 2263]) ("scala-mode-navigation" include nil nil [2264 2296]) ("scala-mode-indent" include nil nil [2297 2325]) ("scala-mode-fontlock" include nil nil [2326 2356]) ("scala-mode-ui" include nil nil [2357 2381]) ("scala-mode-feature" include nil nil [2382 2411]) ("scala-mode-outline" include nil nil [2412 2441]) ("defgroup" code nil nil [2547 2620]) ("scala-mode:api-url" variable (:default-value "http://www.scala-lang.org/docu/files/api/index.html") nil [2622 2780]) ("scala-mode-version" variable (:constant-flag t :default-value "0.5.99.5") nil [2782 2822]) ("scala-mode-svn-revision" variable (:constant-flag t :default-value "$Revision$") nil [2823 2870]) ("scala-bug-e-mail" variable (:constant-flag t :default-value "scala@listes.epfl.ch") nil [2871 2921]) ("scala-web-url" variable (:constant-flag t :default-value "http://scala-lang.org/") nil [2922 2971]) ("scala-mode:browse-web-site" function (:user-visible-flag t) nil [3076 3213]) ("scala-mode:browse-api" function (:user-visible-flag t) nil [3216 3347]) ("scala-mode:report-bug" function (:user-visible-flag t) nil [3350 3752]) ("scala-mode-abbrev-table" variable nil nil [3758 3843]) ("define-abbrev-table" code nil nil [3844 3894]) ("scala-mode-syntax-table" variable nil nil [3897 3980]) ("when" code nil nil [3981 5150]) ("scala-mode" function (:user-visible-flag t) nil [5249 7245]))
    :file "scala-mode.el"
    :pointmax 7250
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
